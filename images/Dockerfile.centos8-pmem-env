# 构建镜像，启动容器:
# 	docker image ls -a
# 	docker build -t clion/centos8-pmem-env:1.0 -f Dockerfile.centos8-pmem-env .
# 	docker run -d --cap-add sys_ptrace -p127.0.0.1:2224:22 --name clion_centos8_pmem clion/centos8-pmem-env:1.0
#   ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[localhost]:2224"
# 重新进入容器:
# 	docker exec -it clion_centos8_pmem /bin/bash
#
# ssh credentials (test user):   ssh -p 2224 work@127.0.0.1
#   work@password 


# SPDX-License-Identifier: BSD-3-Clause
# Copyright 2016-2021, Intel Corporation

#
# Dockerfile - a 'recipe' for Docker to build an image of centos-based
#              environment prepared for running pmemkv build and tests.
#

# Pull base image
FROM registry.hub.docker.com/library/centos:8
MAINTAINER igor.chorazewicz@intel.com

# Set required environment variables
ENV OS centos
ENV OS_VER 8
ENV PACKAGE_MANAGER rpm
ENV NOTTY 1

# Additional parameters to build docker without building components
ARG SKIP_VALGRIND_BUILD
ARG SKIP_PMDK_BUILD
ARG SKIP_LIBPMEMOBJCPP_BUILD
ARG SKIP_PMEMKV_BUILD

# Base development packages
ARG BASE_DEPS="\
	gcc \
	gcc-c++ \
	git \
	make \
	cmake \
	autoconf \
	automake \
	gdb \
	clang \
	ninja-build \
	dos2unix \
	rsync"

# Dependencies for compiling pmemkv project
ARG PMEMKV_DEPS="\
	memkind-devel \
	rapidjson-devel \
	tbb-devel"

# PMDK's dependencies (optional; libpmemobj-devel package may be used instead)
ARG PMDK_DEPS="\
	autoconf \
	automake \
	daxctl-devel \
	gdb \
	man \
	ndctl-devel \
	pandoc \
	python3 \
	rpm-build \
	rpm-build-libs \
	rpmdevtools \
	which"

# libpmemobj-cpp's dependencies (optional; libpmemobj++-devel package may be used instead)
ARG LIBPMEMOBJ_CPP_DEPS="\
	libatomic \
	tbb-devel"

# pmem's Valgrind dependencies (optional; valgrind-devel package may be used instead)
ARG VALGRIND_DEPS="\
	autoconf \
	automake"

# Examples (optional)
ARG EXAMPLES_DEPS="\
	ncurses-devel"

# Documentation (optional)
ARG DOC_DEPS="\
	doxygen \
	graphviz"

# Tests (optional)
# NOTE: glibc is installed as a separate command; see below
ARG TESTS_DEPS="\
	gdb \
	libunwind-devel"

# Misc for our builds/CI (optional)
ARG MISC_DEPS="\
	clang \
	passwd \
	perl-Text-Diff \
	pkgconf \
	sudo"

# NOTE: ssh-server\gdb-gdbserver
ARG REMOTE_DEBUG_DEPS="\
	gdb \
	openssh-server \
	gdb-gdbserver"

RUN cd /etc/yum.repos.d/
RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
RUN sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*


# Update package repository, extend dnf's package base and install basic tools
RUN dnf update -y \
 && dnf install -y epel-release \
 && dnf install -y 'dnf-command(config-manager)' \
 && dnf config-manager --set-enabled powertools \
 && dnf update -y \
 && dnf install -y --nobest \
	${BASE_DEPS} \
	${PMEMKV_DEPS} \
	${PMDK_DEPS} \
	${LIBPMEMOBJ_CPP_DEPS} \
	${VALGRIND_DEPS} \
	${EXAMPLES_DEPS} \
	${DOC_DEPS} \
	${TESTS_DEPS} \
	${MISC_DEPS} \
	${REMOTE_DEBUG_DEPS} \
 && dnf debuginfo-install -y glibc \
 && dnf clean all

# Install valgrind
COPY install-valgrind.sh install-valgrind.sh
RUN ./install-valgrind.sh centos

# Install pmdk
COPY install-pmdk.sh install-pmdk.sh
RUN ./install-pmdk.sh rpm

# Install pmdk c++ bindings
COPY install-libpmemobj-cpp.sh install-libpmemobj-cpp.sh
RUN ./install-libpmemobj-cpp.sh RPM

# Install pmemkv
COPY install-pmemkv.sh install-pmemkv.sh
RUN ./install-pmemkv.sh


RUN ssh-keygen -A

RUN ( \
    echo 'LogLevel DEBUG2'; \
    echo 'PermitRootLogin yes'; \
    echo 'PasswordAuthentication yes'; \
    echo 'Subsystem sftp /usr/libexec/openssh/sftp-server'; \
  ) > /etc/ssh/sshd_config_test_clion

RUN useradd -m work && yes password | passwd work

CMD ["/usr/sbin/sshd", "-D", "-e", "-f", "/etc/ssh/sshd_config_test_clion"]

